@mixin row-status($status, $bgColor, $borderColor, $textColor, $toggle) {
  background-color: $bgColor;
  border: 1px solid $borderColor;
  border-radius: 5px;
  color: $textColor;
  padding: 0 5px 3px 10px;
  text-transform: uppercase;

  @if $toggle == 'true' {
    @include arrow(2.5px, $textColor);
  }

  &:focus {
    outline: none;
  }
}

@mixin badge-layout($bgColor, $borderColor, $textColor) {
  background-color: $bgColor;
  border: 1px solid $borderColor;
  border-radius: 5px;
  color: $textColor;
}

@mixin arrow($position, $color) {

  &:after {
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    border-top: 4px solid $color;
    clear: both;
    content: '';
    display: inline-block;
    margin: 5px;
    position: relative;
    top: 2px;
    transform: rotate(0deg);
    transition: all 200ms ease-in-out;
    @if $position {
      top: $position;
    }
  }
}

@mixin sort-triangles($color) {

  &:before {
    border-bottom: 5px solid $color;
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    bottom: 50%;
    content: '';
    display: inline-block;
    opacity: 0.6;
    position: absolute;
    right: spacing(s);
    transform: rotate(0deg);
    transition: all 200ms ease-in-out;
  }

  &:after {
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    border-top: 5px solid $color;
    content: '';
    display: inline-block;
    opacity: 0.6;
    position: absolute;
    right: spacing(s);
    top: 55%;
    transform: rotate(0deg);
    transition: all 200ms ease-in-out;
  }
}

@mixin upArrow() {

  &:after {
    transform: rotate(180deg);
    transition: all 200ms ease-in-out;
  }
}

@mixin ball-pulse-sync($n: 3, $start: 1) {
  @for $i from $start through $n {

    > div:nth-child(#{$i}) {
      animation: ball-pulse-sync 1s delay(0.2s, $n, $i) infinite ease-in-out;
    }
  }
}

@mixin list-fade-up($class, $starting-duration: 500, $duration: 500) {
  @for $i from 0 through 4 {

    .#{$class}:nth-child(#{$i}) {
      @if ($i > 1) {
        animation: fade-in-from-bottom
          #{$duration}ms
          #{$starting-duration}ms
          ease-in
          1
          forwards;
        $starting-duration: $duration + $starting-duration;
      } @else {
        animation: fade-in-from-bottom #{$duration}ms ease-in 1 forwards;
      }
    }
  }
}

@mixin varying-colors() {
  $colors-list: brand-color(gray, light) brand-color(gray, base)
    brand-color(gray, dark) brand-color(gray, x-dark);

  @each $current-color in $colors-list {
    $i: index($colors-list, $current-color);

    &:nth-of-type(#{$i}) {
      background-color: $current-color;
    }
  }
}
